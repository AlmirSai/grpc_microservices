version: '3.8'
services:
  # Zookeeper for Kafka coordination.
  zookeeper:
    container_name: zookeeper
    image: wurstmeister/zookeeper
    ports:
      - "2182:2181"
    networks:
      - microservices-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka broker.
  kafka:
    container_name: kafka
    image: wurstmeister/kafka
    ports:
      - "9093:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_CREATE_TOPICS: "user-events:3:1"
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 24
      KAFKA_HEAP_OPTS: "-Xmx1G -Xms1G"
    networks:
      - microservices-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --list --bootstrap-server localhost:9092 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL instance for Service1 (users).
  postgres:
    container_name: postgres
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: users_db
      POSTGRES_MAX_CONNECTIONS: 200
      POSTGRES_SHARED_BUFFERS: 512MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1536MB
      POSTGRES_WORK_MEM: 16MB
    ports:
      - "5434:5432"
    networks:
      - microservices-network
    volumes:
      - pgdata:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

  # PostgreSQL instance for Service2 (orders).
  postgres_orders:
    container_name: postgres_orders
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: orders_db
      POSTGRES_MAX_CONNECTIONS: 200
      POSTGRES_SHARED_BUFFERS: 1000MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 2000MB
      POSTGRES_WORK_MEM: 24MB
    ports:
      - "5435:5432"
    networks:
      - microservices-network
    volumes:
      - pgdata_orders:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 4G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Service 1: User Service.
  service1:
    container_name: service1
    build: ./service1
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "50051:50051"
    networks:
      - microservices-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "50051"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Service 2: Order Service.
  service2:
    container_name: service2
    build: ./service2
    env_file:
      - .env
    depends_on:
      postgres_orders:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "50052:50052"
    networks:
      - microservices-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "50052"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Service 3: Monitoring Service
  service3:
    container_name: service3
    build: ./service3
    env_file:
      - .env
    depends_on:
      - postgres
      - postgres_orders
      - kafka
    ports:
      - "50053:50053"
    networks:
      - microservices-network
    deploy:
      resources:
        limits:
          cpus: '3'
          memory: 3G
  # Frontend Service for Metrics Visualization
  frontend:
    container_name: metrics-frontend
    build: ./service3/visualization/frontend
    ports:
      - "80:80"
    networks:
      - microservices-network
    depends_on:
      - service3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

networks:
  microservices-network:
    driver: bridge

volumes:
  pgdata:
  pgdata_orders: